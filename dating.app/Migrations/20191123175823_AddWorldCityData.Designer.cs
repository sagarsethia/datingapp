// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dating.app.data;

namespace dating.app.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191123175823_AddWorldCityData")]
    partial class AddWorldCityData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("dating.app.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Values")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Value");
                });

            modelBuilder.Entity("dating.app.data.Cities", b =>
                {
                    b.Property<string>("cityName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountriescountryName")
                        .HasColumnType("TEXT");

                    b.HasKey("cityName");

                    b.HasIndex("CountriescountryName");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("dating.app.data.Countries", b =>
                {
                    b.Property<string>("countryName")
                        .HasColumnType("TEXT");

                    b.HasKey("countryName");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("dating.app.data.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("dating.app.data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Interest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("LookingFor")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("dating.app.data.Cities", b =>
                {
                    b.HasOne("dating.app.data.Countries", null)
                        .WithMany("MyProperty")
                        .HasForeignKey("CountriescountryName");
                });

            modelBuilder.Entity("dating.app.data.Photo", b =>
                {
                    b.HasOne("dating.app.data.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
